name: Build Flutter APK (Release)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JAVA_TOOL_OPTIONS: "-Xms512m -Xmx2g"
      GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx2g -Dfile.encoding=UTF-8' -Dorg.gradle.daemon=false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter (stable 3.35.1)
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: "3.35.1"
          cache: true

      - name: Flutter doctor (quick)
        run: flutter doctor -v || true

      - name: Pub get (clean + get)
        run: |
          flutter clean
          flutter pub get

      # لو مفعّل flutter_native_splash / flutter_launcher_icons بيشتغلوا تلقائياً
      - name: Generate native splash (if configured)
        run: |
          grep -q "flutter_native_splash" pubspec.yaml && \
          dart run flutter_native_splash:create || echo "no splash"
      - name: Generate launcher icons (if configured)
        run: |
          grep -q "flutter_launcher_icons" pubspec.yaml && \
          dart run flutter_launcher_icons:main || echo "no icons"

      - name: Build APK with Flutter (verbose)
        id: flutter_build
        run: |
          set -o pipefail
          echo ">>> flutter build apk --release"
          (flutter build apk --release -v 2>&1 | tee flutter_build.log)

      - name: Fallback build with Gradle if Flutter APK missing
        id: gradle_build
        if: ${{ !exists('build/app/outputs/flutter-apk/app-release.apk') }}
        run: |
          echo "Flutter APK not found. Trying Gradle assembleRelease…"
          cd android
          ./gradlew assembleRelease --stacktrace --info 2>&1 | tee ../gradle_build.log
          cd ..
          # أطبع أماكن الملفات علشان نعرف المسار النهائي
          echo "==== list outputs ===="
          (ls -la build/app/outputs/flutter-apk || true)
          (ls -la android/app/build/outputs/apk/release || true)

      - name: Show last lines of logs
        if: always()
        run: |
          echo "==== tail flutter_build.log ===="
          tail -n 200 flutter_build.log || true
          echo "==== tail gradle_build.log ===="
          tail -n 200 gradle_build.log || true

      - name: Locate APK path
        id: locate
        run: |
          set -e
          APK_PATH=""
          if [ -f build/app/outputs/flutter-apk/app-release.apk ]; then
            APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          elif [ -f android/app/build/outputs/apk/release/app-release.apk ]; then
            APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
          fi
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "APK_PATH=${APK_PATH}"
          if [ -z "$APK_PATH" ]; then
            echo "::warning::No APK found in common output paths."
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            flutter_build.log
            gradle_build.log

      - name: Upload APK
        if: ${{ steps.locate.outputs.apk_path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.locate.outputs.apk_path }}
