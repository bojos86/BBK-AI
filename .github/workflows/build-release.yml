name: Build Flutter APK (Release)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Flutter (stable 3.24.3)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          cache: true

      - name: Flutter versions
        run: |
          flutter --version
          dart --version

      # (اختياري) عط صلاحية تنفيذ للـ gradlew إذا موجود
      - name: Ensure gradlew executable (ignore if missing)
        run: chmod +x android/gradlew || true

      # إنشاء keystore وربط التوقيع (باستخدام السيكرتس اللي حطّيناها)
      - name: Prepare Android signing
        working-directory: android
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD:     ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEY_ALIAS:        ${{ secrets.ANDROID_KEY_ALIAS }}
        run: |
          set -e
          keytool -genkey -v \
            -keystore keystore.jks \
            -storepass "${ANDROID_KEYSTORE_PASSWORD}" \
            -keypass   "${ANDROID_KEY_PASSWORD}" \
            -alias     "${ANDROID_KEY_ALIAS}" \
            -dname "CN=BBK AI, OU=Engineering, O=BBK, L=Kuwait, S=KW, C=KW" \
            -keyalg RSA -keysize 2048 -validity 10000

          cat > key.properties <<EOF
          storePassword=${ANDROID_KEYSTORE_PASSWORD}
          keyPassword=${ANDROID_KEY_PASSWORD}
          keyAlias=${ANDROID_KEY_ALIAS}
          storeFile=keystore.jks
          EOF

      - name: Pub get
        run: flutter pub get

      # نبني و”نصبّ” كل اللوقز داخل ملفات ونرفعها كـ Artifacts
      - name: Build APK (release, verbose) and capture logs
        env:
          # تخلي بايب يرجّع كود خروج الكوماند الأول حتى مع tee
          SHELLOPTS: pipefail
        run: |
          set -o pipefail
          mkdir -p logs
          flutter doctor -v        2>&1 | tee logs/flutter_doctor.log
          flutter clean
          # لو تبي أي تولز تولّد أيقونات/سبلاش، تقدر ترجعها قبل البناء
          flutter build apk --release --no-tree-shake-icons -v 2>&1 | tee logs/build_log.txt
          # نطبع آخر 200 سطر لتسهيل القراءة السريعة في صفحة الأكشنز
          echo "===== TAIL(build_log.txt) ====="
          tail -n 200 logs/build_log.txt

      # لو فشل البناء نقتطع مقطع الخطأ السريع (اختياري يفيد التشخيص)
      - name: Quick failure snippet
        if: failure()
        run: |
          echo "===== FAILURE SNIPPET ====="
          awk '/FAILURE: Build failed with an exception./,0' logs/build_log.txt | head -n 120 || true
          echo "===== END SNIPPET ====="

      # نجمع لوقات Gradle أيضاً (لو موجودة)
      - name: Collect Gradle logs
        if: always()
        run: |
          mkdir -p logs/gradle
          # دايماً لوقات غرادل تكون تحت مجلد الهوم
          find "$HOME/.gradle" -name "*.log" -print -exec cp {} logs/gradle/ \; || true
          # وأي لوق بداخل android/.gradle
          find android -path "*/.gradle/*" -name "*.log" -print -exec cp {} logs/gradle/ \; || true

      # ارفع اللوقز كـ Artifact سواء نجح أو فشل
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs

      # ارفع الـ APK لو انبنى
      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
